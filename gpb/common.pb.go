// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package gpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CardRefushTy int32

const (
	CardRefushTy_CR_None  CardRefushTy = 0
	CardRefushTy_CR_Daily CardRefushTy = 1
)

var CardRefushTy_name = map[int32]string{
	0: "CR_None",
	1: "CR_Daily",
}

var CardRefushTy_value = map[string]int32{
	"CR_None":  0,
	"CR_Daily": 1,
}

func (x CardRefushTy) String() string {
	return proto.EnumName(CardRefushTy_name, int32(x))
}

func (CardRefushTy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type PItem struct {
	// 字典id
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// 道具数量
	Num int32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	// 实例id
	InsId string `protobuf:"bytes,3,opt,name=InsId,proto3" json:"InsId,omitempty"`
	// 等级
	Lv int32 `protobuf:"varint,4,opt,name=Lv,proto3" json:"Lv,omitempty"`
}

func (m *PItem) Reset()         { *m = PItem{} }
func (m *PItem) String() string { return proto.CompactTextString(m) }
func (*PItem) ProtoMessage()    {}
func (*PItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *PItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PItem.Merge(m, src)
}
func (m *PItem) XXX_Size() int {
	return m.Size()
}
func (m *PItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PItem.DiscardUnknown(m)
}

var xxx_messageInfo_PItem proto.InternalMessageInfo

func (m *PItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PItem) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *PItem) GetInsId() string {
	if m != nil {
		return m.InsId
	}
	return ""
}

func (m *PItem) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type PCard struct {
	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BigImgUrl string `protobuf:"bytes,2,opt,name=BigImgUrl,proto3" json:"BigImgUrl,omitempty"`
	ImgUrl    string `protobuf:"bytes,3,opt,name=ImgUrl,proto3" json:"ImgUrl,omitempty"`
	// 卡片的刷新类型
	RefushTy CardRefushTy `protobuf:"varint,4,opt,name=RefushTy,proto3,enum=CardRefushTy" json:"RefushTy,omitempty"`
	// 卡片的到期时间
	Timeout int32 `protobuf:"varint,5,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// 卡片的刷新奖励
	Items []*PItem `protobuf:"bytes,6,rep,name=Items,proto3" json:"Items,omitempty"`
	// 刷新时间（上一次领取时间
	RefushTime int32 `protobuf:"varint,7,opt,name=RefushTime,proto3" json:"RefushTime,omitempty"`
}

func (m *PCard) Reset()         { *m = PCard{} }
func (m *PCard) String() string { return proto.CompactTextString(m) }
func (*PCard) ProtoMessage()    {}
func (*PCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *PCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PCard.Merge(m, src)
}
func (m *PCard) XXX_Size() int {
	return m.Size()
}
func (m *PCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PCard.DiscardUnknown(m)
}

var xxx_messageInfo_PCard proto.InternalMessageInfo

func (m *PCard) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PCard) GetBigImgUrl() string {
	if m != nil {
		return m.BigImgUrl
	}
	return ""
}

func (m *PCard) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *PCard) GetRefushTy() CardRefushTy {
	if m != nil {
		return m.RefushTy
	}
	return CardRefushTy_CR_None
}

func (m *PCard) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PCard) GetItems() []*PItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PCard) GetRefushTime() int32 {
	if m != nil {
		return m.RefushTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("CardRefushTy", CardRefushTy_name, CardRefushTy_value)
	proto.RegisterType((*PItem)(nil), "PItem")
	proto.RegisterType((*PCard)(nil), "PCard")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x6b, 0xc2, 0x30,
	0x14, 0xc7, 0x9b, 0xba, 0x54, 0xfb, 0x74, 0x4e, 0xc2, 0x18, 0x39, 0x48, 0x10, 0x4f, 0xba, 0x43,
	0x61, 0xee, 0xb8, 0x9b, 0x0e, 0x46, 0x40, 0x9c, 0x04, 0x77, 0xd9, 0x45, 0x74, 0x8d, 0x5d, 0xc1,
	0x18, 0x51, 0x2b, 0xf8, 0x2d, 0xf6, 0x39, 0xf6, 0x49, 0x76, 0xec, 0x71, 0xc7, 0xd1, 0x7e, 0x91,
	0xd1, 0xb4, 0x6e, 0xbd, 0xe5, 0xfd, 0x1e, 0xff, 0xdf, 0xcb, 0x4b, 0xa0, 0xf1, 0xa6, 0x95, 0xd2,
	0x1b, 0x6f, 0xbb, 0xd3, 0x07, 0xdd, 0x7d, 0x06, 0x3c, 0xe5, 0x07, 0xa9, 0x48, 0x13, 0x6c, 0xee,
	0x53, 0xd4, 0x41, 0x3d, 0x2c, 0x6c, 0xee, 0x93, 0x16, 0x54, 0x26, 0x91, 0xa2, 0xb6, 0x01, 0xd9,
	0x91, 0x5c, 0x03, 0xe6, 0x9b, 0x3d, 0xf7, 0x69, 0xa5, 0x83, 0x7a, 0xae, 0xc8, 0x8b, 0x2c, 0x37,
	0x3e, 0xd2, 0x8b, 0x3c, 0x37, 0x3e, 0x76, 0x63, 0x04, 0x78, 0x3a, 0x5a, 0xec, 0xfc, 0x92, 0xd1,
	0x35, 0xc6, 0x36, 0xb8, 0xc3, 0x30, 0xe0, 0x2a, 0x78, 0xd9, 0xad, 0x8d, 0xd7, 0x15, 0xff, 0x80,
	0xdc, 0x80, 0x53, 0xb4, 0x72, 0x7d, 0x51, 0x91, 0x3e, 0xd4, 0x84, 0x5c, 0x45, 0xfb, 0xf7, 0xd9,
	0xc9, 0x4c, 0x69, 0x0e, 0x2e, 0xbd, 0x4c, 0x7f, 0x86, 0xe2, 0xaf, 0x4d, 0x28, 0x54, 0x67, 0xa1,
	0x92, 0x3a, 0x3a, 0x50, 0x6c, 0xee, 0x73, 0x2e, 0x49, 0x1b, 0x70, 0xb6, 0xe4, 0x9e, 0x3a, 0x9d,
	0x4a, 0xaf, 0x3e, 0x70, 0x3c, 0xb3, 0xb3, 0xc8, 0x21, 0x61, 0x00, 0x85, 0x23, 0x54, 0x92, 0x56,
	0x4d, 0xb4, 0x44, 0x6e, 0xfb, 0xd0, 0x28, 0x4f, 0x24, 0x75, 0xa8, 0x8e, 0xc4, 0x7c, 0xa2, 0x37,
	0xb2, 0x65, 0x91, 0x06, 0xd4, 0x46, 0x62, 0xfe, 0xb8, 0x08, 0xd7, 0xa7, 0x16, 0x1a, 0xde, 0x7d,
	0x25, 0x0c, 0xc5, 0x09, 0x43, 0x3f, 0x09, 0x43, 0x1f, 0x29, 0xb3, 0xe2, 0x94, 0x59, 0xdf, 0x29,
	0xb3, 0x5e, 0xb1, 0xf7, 0x10, 0x6c, 0x97, 0x9f, 0xf6, 0xd5, 0x93, 0xd6, 0xc1, 0x5a, 0x7a, 0xd3,
	0xec, 0xf9, 0x97, 0xd1, 0x6a, 0xe9, 0x98, 0x8f, 0xb8, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x01, 0x4e, 0x18, 0x98, 0x01, 0x00, 0x00,
}

func (m *PItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lv != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InsId) > 0 {
		i -= len(m.InsId)
		copy(dAtA[i:], m.InsId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.InsId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Num != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefushTime != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.RefushTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if m.RefushTy != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.RefushTy))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BigImgUrl) > 0 {
		i -= len(m.BigImgUrl)
		copy(dAtA[i:], m.BigImgUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BigImgUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.Num != 0 {
		n += 1 + sovCommon(uint64(m.Num))
	}
	l = len(m.InsId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Lv != 0 {
		n += 1 + sovCommon(uint64(m.Lv))
	}
	return n
}

func (m *PCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.BigImgUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RefushTy != 0 {
		n += 1 + sovCommon(uint64(m.RefushTy))
	}
	if m.Timeout != 0 {
		n += 1 + sovCommon(uint64(m.Timeout))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.RefushTime != 0 {
		n += 1 + sovCommon(uint64(m.RefushTime))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefushTy", wireType)
			}
			m.RefushTy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefushTy |= CardRefushTy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefushTime", wireType)
			}
			m.RefushTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefushTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
